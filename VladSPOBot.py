import telebot 
import random 
import logging

from telebot import types 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("tgbot.log")

bot = telebot.TeleBot("7773810281:AAEMBlyOwEqTnX8GNXV5kEZU83CeFttMW-Q") 

@bot.message_handler(commands=['start']) 
def welcome(message): 
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    
    # keyboard 
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True) 
    item1 = types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ") 
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?") 

    markup.add(item1, item2) 

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>.".format(message.from_user, bot.get_me()), 
        parse_mode='html', reply_markup=markup)
    logger.info(f"–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@bot.message_handler(content_types=['text']) 
def chat(message): 
    if message.chat.type == 'private': 
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}: {message.text}")
        
        if message.text == 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ': 
            random_number = random.randint(0, 100)
            bot.send_message(message.chat.id, str(random_number)) 
            logger.info(f"–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {random_number}.")
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?': 
            markup = types.InlineKeyboardMarkup(row_width=2) 
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good') 
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad') 

            markup.add(item1, item2) 

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup) 
            logger.info(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.from_user.first_name}: {message.text}")
        else: 
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢') 
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}: {message.text}")

@bot.callback_query_handler(func=lambda call: True) 
def callback_inline(call): 
    try: 
        if call.message: 
            if call.data == 'good': 
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä') 
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –æ—Ç–≤–µ—Ç–∏–ª: '–•–æ—Ä–æ—à–æ'.")
            elif call.data == 'bad': 
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢') 
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –æ—Ç–≤–µ—Ç–∏–ª: '–ù–µ –æ—á–µ–Ω—å'.")

            # remove inline buttons 
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?", 
                reply_markup=None) 
            logger.info("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–∞ inline.") 

    except Exception as e: 
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {repr(e)}") 

# RUN 
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.polling(none_stop=True)